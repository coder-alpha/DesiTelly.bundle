#!/usr/bin/env python
# -*- coding: utf-8 -*-

import string, re

ART = 'http://i.imgur.com/GwSnkxE.jpg'
COVER = 'http://i.imgur.com/0snKSZt.png'

########################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	title = 'SpeedWatch Redirect Page'
	summary = 'Summary info Page'
	
	try:
		txt = HTTP.Request(url).content
		thumb = re.findall(r'image:.*\"(.*)\",', txt)[0]
		duration = re.findall(r'duration:.*\"(.*)\",', txt)[0]
	except:
		thumb = url
	
	return VideoClipObject(
		title = title,
		summary = summary,
		art = Resource.ContentsOfURLWithFallback([thumb,ART]),
		thumb = Resource.ContentsOfURLWithFallback([thumb,COVER])
	)
	
####################################################################################################
def MediaObjectsForURL(url):

	#Log("url-----------" + url)
	files = []
	try:
		page_data = HTTP.Request(url).content
		#Log(page_data)
		sources = re.findall(r'sources:.*(\[.*\]),', page_data)[0]
		sources = sources.replace('file','"file"').replace('label','"label"')
		#Log(sources)
		files = JSON.ObjectFromString(sources)
		#Log(files)
	except:
		pass
		
	if len(files) == 0:
		raise Ex.MediaNotAvailable
	
	#Log(files)
	
	sortable_list = []
	for file in files:
		furl = file['file']
		
		if 'label' in file.keys():
			res = file['label'].replace('p','')
			if res != '1080':
				res = '0'+res
		else:
			res = '720'
		sortable_list.append({'label': res, 'file':furl})
		
	newlist = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
	media_obj = []
	
	for file in newlist:
		furl = file['file']
		res = int(file['label'])
		
		#Log("furl ---- %s" % furl)
		
		if '.flv' in furl:
			mo = MediaObject(
					container = Container.FLV,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		elif '.m3u8' in furl:
			mo = MediaObject(
					protocol = 'hls',
					container = 'mpegts',
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		else:
			mo = MediaObject(
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		
		media_obj.append(mo)

	return media_obj

####################################################################################################
@indirect
def PlayVideo(url):

	if '.m3u8' in url:
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))
	else:
		return IndirectResponse(VideoClipObject, key=url)
