import string, re

HTTP_HEADERS = {
	'Accept	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Encoding:	gzip, deflate',
	'Accept-Language:	en-US,en;q=0.5',
	'Connection:		keep-alive',
	'Referer:		http://www.vidshare.us',
	'User-Agent:		Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
}

ART = 'http://i.imgur.com/GwSnkxE.jpg'
COVER = 'http://i.imgur.com/0snKSZt.png'

########################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	try:
		page_data = HTML.ElementFromURL(url)
		img = page_data.xpath("//img/@src")[0]
		thumb = img
	except:
		thumb = url

	title = 'VidShare Redirect Page'
	summary = 'Summary info Page'
	
	return VideoClipObject(
		title = title,
		summary = summary,
		art = Resource.ContentsOfURLWithFallback([thumb,ART]),
		thumb = Resource.ContentsOfURLWithFallback([thumb,COVER])
	)
	
####################################################################################################
def MediaObjectsForURL(url):

	#Log("url-----------" + url)
	
	return [
		MediaObject(
			container = Container.FLV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = '720',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url, quality='hd'))]
		),
		MediaObject(
			container = Container.FLV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = 'sd',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url, quality='sd'))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, quality):

	try:
		page_data = HTML.ElementFromURL(url)
		stuff = page_data.xpath(".//script[contains(text(),'vplayer')]//text()")[0]
		if quality == 'HD':
			match = re.search(',{file:"(.+?)\",label:"HD', stuff)
		else:
			match = re.search('file:"(.+?)\",label:"SD', stuff)
		url0 = match.group(1)
		
		# http://103.43.94.69/l7z7btxjdqnhgn4vfj2bga6cqdroexc376gj3a6mmo4emsbchtortpisujva/v.flv
	except:
		url0 = url
	
	return IndirectResponse(VideoClipObject, key=url0)
