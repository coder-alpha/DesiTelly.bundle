#!/usr/bin/env python
# -*- coding: utf-8 -*-

import string, re

# import Shared ServiceCode	
import jsunpack as JSP

ART = 'http://i.imgur.com/GwSnkxE.jpg'
COVER = 'http://i.imgur.com/0snKSZt.png'

########################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	title = 'TheVideoBee Redirect Page'
	summary = 'Summary info Page'
	
	try:
		txt = HTTP.Request(url).content
		if 'p,a,c,k,e,' in txt:
			JSP_codes = re.findall(r'eval\(.+\)', txt)
			for JSP_code in JSP_codes:
				if 'vplayer' in JSP_code:
					break
			# Log(JSP_code)
			txt = JSP.unpack(JSP_code)
			thumb = re.findall(r'poster:\"(.*?)\",', txt)[0]
			summaryt = re.findall(r'title:\"(.*?)\"', txt)[0]
			if summaryt != None and len(summaryt) > 0:
				summary = summaryt
		else:
			thumb = re.findall(r'image:.*\"(.*)\",', txt)[0]
	except:
		thumb = url
	
	return VideoClipObject(
		title = title,
		summary = summary,
		art = Resource.ContentsOfURLWithFallback([thumb,ART]),
		thumb = Resource.ContentsOfURLWithFallback([thumb,COVER])
	)
	
####################################################################################################
def MediaObjectsForURL(url):

	#Log("url-----------" + url)
	files = []
	try:
		page_data = HTTP.Request(url).content
		if 'p,a,c,k,e,' in page_data:
			#Log(page_data)
			JSP_codes = re.findall(r'eval\(.+\)', page_data)
			for JSP_code in JSP_codes:
				if 'vplayer' in JSP_code:
					break
			#Log(JSP_code)
			txt = JSP.unpack(JSP_code)
			sources = re.findall(r'sources:\[(.*?)\],', txt)[0]
			sources = sources.split(",")
			#Log(sources)
			for s in sources:
				if '.mp4' in s:
					s = s.replace('"','')
					files.append({'label': '720', 'file':s})
			#Log(files)
	except:
		pass
		
	if len(files) == 0:
		raise Ex.MediaNotAvailable
	
	sortable_list = []
	for file in files:
		furl = file['file']
		
		if 'label' in file.keys():
			res = file['label'].replace('p','')
			if res != '1080':
				res = '0'+res
		else:
			res = '720'
		sortable_list.append({'label': res, 'file':furl})
		
	newlist = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
	media_obj = []
	
	for file in newlist:
		furl = file['file']
		res = int(file['label'])
		
		#Log("furl ---- %s" % furl)
		
		if '.flv' in furl:
			mo = MediaObject(
					container = Container.FLV,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		elif '.m3u8' in furl:
			mo = MediaObject(
					protocol = 'hls',
					container = 'mpegts',
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		else:
			mo = MediaObject(
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		
		media_obj.append(mo)

	return media_obj

####################################################################################################
@indirect
def PlayVideo(url):
	
	if '.m3u8' in url:
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))
	else:
		return IndirectResponse(VideoClipObject, key=url)
