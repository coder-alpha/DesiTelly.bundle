#!/usr/bin/env python
# -*- coding: utf-8 -*-

import string, re

ART = 'http://i.imgur.com/GwSnkxE.jpg'
COVER = 'http://i.imgur.com/0snKSZt.png'
USE_ITAG = True

########################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	thumb = ''
	title = 'Google Redirect Page'
	summary = 'Summary info Page'
	
	return VideoClipObject(
		title = title,
		summary = summary,
		art = Resource.ContentsOfURLWithFallback([thumb,ART]),
		thumb = Resource.ContentsOfURLWithFallback([thumb,COVER])
	)
	
####################################################################################################
def MediaObjectsForURL(url):

	page_data = HTTP.Request(url).content
	#Log(page_data)
	files = []
	
	try:
		match = re.findall(r'\[{.+}]', page_data)[0]
		#Log(match)
		files = JSON.ObjectFromString(match)
	except:
		pass
		
	if len(files) == 0:
		raise Ex.MediaNotAvailable
	
	sortable_list = []
	for file in files:
		furl = file['file']
		res = None
		if USE_ITAG:
			res = googletag(furl)
			#Log(res)
			if res != None:
				res = res['quality'].replace('p','')
				if res != '1080':
					res = '0'+res
		if res == None:
			if 'label' in file.keys():
				res = file['label'].replace('p','')
				if res != '1080':
					res = '0'+res
			else:
				res = '720'
		
			
		#type = file['type']
		sortable_list.append({'label': res, 'file':furl})
		
	newlist = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
	media_obj = []
	
	for file in newlist:
		furl = file['file']
		res = int(file['label'])
		#type = file['type']
		
		#Log("furl ---- %s" % furl)
		
		if '.flv' in furl:
			mo = MediaObject(
					container = Container.FLV,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		else:
			mo = MediaObject(
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					video_resolution = res,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key=Callback(PlayVideo, url=furl))]
				)
		
		media_obj.append(mo)

	return media_obj

####################################################################################################
@indirect
def PlayVideo(url):

	return IndirectResponse(VideoClipObject, key = url)
	
####################################################################################################
def googletag(url):
	quality = re.compile('itag=(\d*)').findall(url)
	quality += re.compile('=m(\d*)$').findall(url)
	try: quality = quality[0]
	except: return None
	#control.log('<><><><><><><><><><><><> %s <><><><><><><><><>' % quality)
	if quality in ['37', '137', '299', '96', '248', '303', '46']:
		return {'source': 'gvideo', 'quality': u'1080p', 'url': url}
	elif quality in ['22', '84', '136', '298', '120', '95', '247', '302', '45', '102']:
		return {'source': 'gvideo', 'quality': u'720p', 'url': url}
	elif quality in ['35', '44', '135', '244', '94', '59']:
		return {'source': 'gvideo', 'quality': u'480p', 'url': url}
	elif quality in ['18', '34', '43', '82', '100', '101', '134', '243', '93']:
		return {'source': 'gvideo', 'quality': u'480p', 'url': url}
	elif quality in ['5', '6', '36', '83', '133', '242', '92', '132']:
		return {'source': 'gvideo', 'quality': u'480p', 'url': url}
	else:
		return {'source': 'gvideo', 'quality': u'720p', 'url': url}
