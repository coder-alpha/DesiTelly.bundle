import demjson, re

HTTP_HEADERS = {
	'Accept	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Encoding:	gzip, deflate',
	'Accept-Language:	en-US,en;q=0.5',
	'Connection:		keep-alive',
	'Referer:		http://playu.me',
	'User-Agent:		Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
}

ART = 'http://i.imgur.com/GwSnkxE.jpg'
COVER = 'http://i.imgur.com/0snKSZt.png'

########################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	try:
		page = HTTP.Request(url).content
		page_data = HTML.ElementFromString(page)
		jsblock = page_data.xpath("//script[contains(text(),'jwplayer(\"vplayer\").setup')]//text()")[0]
		jsonValue = None
		jsonValue = ((jsblock.split(');',1)[0]).strip()).lstrip("jwplayer(\"vplayer\").setup(")
		Log("JSON Value = "+jsonValue)
		if (jsonValue is None):
			raise
 		value = demjson.decode(jsonValue)
 		thumb = value['image']		
	except:
		thumb = url
		
	title = 'PlayU Redirect Page'
	summary = 'Summary info Page'
	
	return VideoClipObject(
		title = title,
		summary = summary + '\n\n',
		art = Resource.ContentsOfURLWithFallback([thumb,ART]),
		thumb = Resource.ContentsOfURLWithFallback([thumb,COVER])
	)
	
####################################################################################################
def MediaObjectsForURL(url):
	
	return [
		MediaObject(
			container = Container.MP4,
			#video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		page = HTTP.Request(url).content
		if 'File was deleted' in page:
			raise Ex.MediaNotAvailable

		page_data = HTML.ElementFromString(page)
		
		stuff = page_data.xpath("//script//text()")[2]
		#Log(stuff)
		match = re.findall(r'(https?://\S+)', stuff)
		for url in match:
			if '.mp4' in url:
				#url0 = url.replace('\"','').replace('}','').replace(']','').replace(',','')
				url0 = re.sub(r'[^0-9a-zA-Z \-/.\':+&!()]', '', url)
				break
		#Log(url0)
		
		# http://103.43.94.69/l7z7btxjdqnhgn4vfj2bga6cqdroexc376gj3a6mmo4emsbchtortpisujva/v.flv
	except:
		url0 = url
		
	return IndirectResponse(VideoClipObject, key=url0)
