#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re, json, base64

Juice = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

def juicyCodeHtml(e):
	try:
		e = re.findall(r'JuicyCodes.Run\(([^\)]+)', e, re.IGNORECASE)[0]
		e = re.sub(r'\"\s*\+\s*\"','', e)
		e = re.sub(r'[^A-Za-z0-9+\\/=]','', e)
		
		#print 'step 1 done !'
		#print 'e = %s' % e
		
	except Exception as e:
		print e
		return None

	t = ""
	n=r=i=s=o=u=a=f=0

	while f < len(e):
		try:
			s = Juice.index(e[f]);f+=1; 
			o = Juice.index(e[f]);f+=1; 
			u = Juice.index(e[f]);f+=1; 
			a = Juice.index(e[f]);f+=1; 
			n = s << 2 | o >> 4; r = (15 & o) << 4 | u >> 2; i = (3 & u) << 6 | a
			t += chr(n)
			if 64 != u: t += chr(r)
			if 64 != a: t += chr(i)
		except:
			continue
		pass
		
	#print 'step 2 done !'
	#print t

	try:
		t = unpack(t)
		t = unicode(t, 'utf-8')
	except Exception as e:
		print e
		t = None
	
	return t
	
def unpack(source):
	"""Unpacks P.A.C.K.E.R. packed js code."""
	payload, symtab, radix, count = filterargs(source)

	if count != len(symtab):
		raise UnpackingError('Malformed p.a.c.k.e.r. symtab.')

	try:
		unbase = Unbaser(radix)
	except TypeError:
		raise UnpackingError('Unknown p.a.c.k.e.r. encoding.')

	def lookup(match):
		"""Look up symbols in the synthetic symtab."""
		word = match.group(0)
		return symtab[unbase(word)] or word

	source = re.sub(r'\b\w+\b', lookup, payload)
	return replacestrings(source)

def filterargs(source):
	"""Juice from a source file the four args needed by decoder."""
	argsregex = (r"}\s*\('(.*)',\s*(.*?),\s*(\d+),\s*'(.*?)'\.split\('\|'\)")
	args = re.search(argsregex, source, re.DOTALL).groups()

	try:
		payload, radix, count, symtab = args
		radix = 36 if not radix.isdigit() else int(radix)
		return payload, symtab.split('|'), radix, int(count)
	except ValueError:
		raise UnpackingError('Corrupted p.a.c.k.e.r. data.')

def replacestrings(source):
	"""Strip string lookup table (list) and replace values in source."""
	match = re.search(r'var *(_\w+)\=\["(.*?)"\];', source, re.DOTALL)

	if match:
		varname, strings = match.groups()
		startpoint = len(match.group(0))
		lookup = strings.split('","')
		variable = '%s[%%d]' % varname
		for index, value in enumerate(lookup):
			source = source.replace(variable % index, '"%s"' % value)
		return source[startpoint:]
	return source


class Unbaser(object):
	"""Functor for a given base. Will efficiently convert
	strings to natural numbers."""
	ALPHABET = {
		62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
		95: (' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'
			 '[\]^_`abcdefghijklmnopqrstuvwxyz{|}~')
	}

	def __init__(self, base):
		self.base = base

		# If base can be handled by int() builtin, let it do it for us
		if 2 <= base <= 36:
			self.unbase = lambda string: int(string, base)
		else:
			if base < 62:
				self.ALPHABET[base] = self.ALPHABET[62][0:base]
			elif 62 < base < 95:
				self.ALPHABET[base] = self.ALPHABET[95][0:base]
			# Build conversion dictionary cache
			try:
				self.dictionary = dict((cipher, index) for index, cipher in enumerate(self.ALPHABET[base]))
			except KeyError:
				raise TypeError('Unsupported base encoding.')

			self.unbase = self.dictunbaser

	def __call__(self, string):
		return self.unbase(string)

	def dictunbaser(self, string):
		"""Decodes a  value to an integer."""
		ret = 0
		for index, cipher in enumerate(string[::-1]):
			ret += (self.base ** index) * self.dictionary[cipher]
		return ret

class UnpackingError(Exception):
	"""Badly packed source or general error. Argument is a
	meaningful description."""
	pass
	
def testjs():
	js = ''''''
	
	#data = unwise2.unwise_process(js)
	#print data
		
	html_with_unpacked_js = juicyCodeHtml(js)
	print html_with_unpacked_js
	
#testjs()
